*taglist.cnx*	用于浏览源代码的插件

作者：Yegappan Lakshmanan  (yegappan AT yahoo DOT com)
译者：闲耘™(hotoo.cn[AT]gmail.com)
      张雷 (zhang.lei.fly[AT]gmail.com)
      davidx (mykingheaven[AT]gmail.com)
      minyang(minyang78[AT]gmail.com)
针对 Vim version 6.0 及其以上版本
最后更新： 2007/5/24

1. 概述 					|taglist-intro|
2. 网上的 Taglist 资讯				|taglist-internet|
3. 安装前提					|taglist-requirements|
4. 安装		 				|taglist-install|
5. 使用 					|taglist-using|
6. 选项 					|taglist-options|
7. 命令 					|taglist-commands|
8. 全局函数					|taglist-functions|
9. 扩展 					|taglist-extend|
10. 常见问题 					|taglist-faq|
11. 许可证 					|taglist-license|
12. 待办事项					|taglist-todo|

==============================================================================
						*taglist-intro*
1. 概述~

"Tag List" 是一个用于浏览源码的的 Vim 插件。它允许你有效的浏览各种不同编程语言
的源码文件，"Tag List" 提供以下特性：

    * 显示 tags （标签，后面均保留原文） （函数，类，结构，变量，等等。）
      在纵向、或者横向的分割窗口中显示定义。
    * 在使用 GUI 的 Vim (gvim) 中，在下拉菜单和弹出菜单中显示 tags。
    * 在文件或缓冲区之间切换时，自动更新 taglist 窗口。
      当打开新文件时，这个文件的 tags 定义会被添加到已存在的文件列表中，
      并以文件名作为分组显示。
    * 当 taglist 窗口中的标签名被选中时，光标会自动定位在源文件对应的
      标签定义处。
    * 自动高亮当前 tag 名。
    * tags 按照类型分组并显示在可折叠的树中。
    * 可以显示 tag 的原型结构和作用域。
    * 在 taglist 窗口中用 tag 的原型来替代 tag 名称显示（可选）。
    * tag 列表可以按照名称或者时间顺序排序。
    * 支持以下语言文件： Assembly, ASP, Awk, Beta, C,
      C++, C#, Cobol, Eiffel, Erlang, Fortran, HTML, Java, Javascript, Lisp,
      Lua, Make, Pascal, Perl, PHP, Python, Rexx, Ruby, Scheme, Shell, Slang,
      SML, Sql, TCL, Verilog, Vim and Yacc.
    * 可以很方便的扩展以支持新语言，修改现有语言支持也很容易。
    * 提供了在 Vim 状态栏或者标题栏显示当前 tag 名称的功能。
    * taglist 中的 tags 和文件列表可以被保存并用于恢复整个 Vim 会话(Session).
    * 提供了获取当前 tag 名称和原型的命令。
    * 支持在控制台/终端和 GUI 的 Vim 版本。
    * 可以配合 winmanager 插件一起工作。使用 winmanager，可以让 Vim 插件，比如
      文件资源管理器，缓冲区浏览器和 taglist 插件就像在 IDE 一样。
    * 支持 Unix 和 MS-Windows 操作系统。

==============================================================================
						*taglist-internet*
2. 互联网上的 Taglist

Taglist 的主页在:
>
	http://vim-taglist.sourceforge.net/
<
你可以加入到 Taglist 的邮件列表中来提出你的问题, 建议, 或者 bug 报告.
访问下面的页面来加入到邮件列表中:
>
	http://groups.yahoo.com/group/taglist
<
==============================================================================
						*taglist-requirements*
3. 须求~

这个 taglist 插件需要以下组件:

    * Vim 6.0 或更高级版本
    * Exuberant ctags 5.0 或 更高级版本

这个 taglist 插件可以在所有系统平台工作,只要系统平台的有 exuberant ctags
utility 和 Vim 支持 (这里包括 MS-Windows 和 基于 Unix
的操作系统平台).

这个 taglist 插件依赖 exuberant ctags 工具动态
生成的 tag 列表. exuberant ctags 必须安装到
你的系统里，如果你想使用这个插件.  exuberant ctags 工具随
大多数的 Linux 发行版一起发布.  你也可下载 exuberant ctags 工具
从:
>
	http://ctags.sourceforge.net
<
这个 taglist 插件不用建立 tags 文件 也没必要
建立一个 tags 文件来使用这个插件. 这个 taglist 插件不能正常工作如果没有
 GNU ctags 或  Unix ctags 工作.

这个插件依赖于 Vim 的 "filetype" 检测机能 去检测 
当前文件的类型. 你必须打开 Vim 文件检测机能，通过 
添加以下命令行到你的 .vimrc 文件:
>
	filetype on
<
这个 taglist 插件 不能正常工作，如果你打开了 Vim 严格模式 (使用了
 -Z 命令行参数).

这个 taglist 插件 使用了 Vim system() 函数 协同 exuberant
ctags 工具. 如果 Vim 编译时没有 + system() 函数那么你就
没法用 taglist 插件.一些 Linux 发行版 (如Suse) 编译的
Vim 是没有 system() 函数，这是基于安全原因的.

==============================================================================
						*taglist-install*
4. 安装~

1. 下载 taglist.zip 文件和解压这个文件到 $HOME/.vim 或者
   $HOME/vimfiles 或者 $VIM/vimfiles 目录. 完成这个步骤后,
   你会以下两个文件 (目录结构要维持原样):

	plugin/taglist.vim - taglist 插件的主文件 
	doc/taglist.txt    - 文档 (帮助) 文件

   通过参考 |add-plugin| 和 |'runtimepath'| Vim 帮助页面得到更多
   关于安装 Vim 插件的细节.
2. 切换到 $HOME/.vim/doc 或者 $HOME/vimfiles/doc 或者 $VIM/vimfiles/doc
   目录, 打开 Vim 和 运行 ":helptags ." 命令生成
   taglist 帮助文件的 tags . 没有这个步骤,你是不能跳转到
   taglist 帮助文件标题.
3. 如果 exuberant ctags 工具没有安装在 由 PATH 环境参数
   指定的其中一个目录, 就应该在 .vimrc 文件设定 'Tlist_Ctags_Cmd' 参数
   来指定 exuberant ctags 工具
   所在的目录 (必须包括完整的目录和文件名).
4. 如果你正在运行一个终端/控制台版本的 VIM 并且终端
   不支持改变窗口宽度，那么就应该设置
   'Tlist_Inc_Winwidth' 参数为 0  并写入 .vimrc 文件中.
5. 重启 Vim.
6. 你现在可以使用 ":TlistToggle" 命令 打开/关闭 taglist
   窗口. 你可以使用 ":help taglist" 命令 获得更多关于
   使用 taglist 插件信息.

要卸载 taglist 插件, 只要删除 $HOME/.vim 或者 $HOME/vimfiles目录
中的 plugin/taglist.vim 和 doc/taglist.txt 文件  .

==============================================================================
						*taglist-using*
5. 使用~

这个taglist 插件可以以几种不同的方式被使用.

1. 你可以保持 taglist 窗口打开 在整个编辑会话期间. 在
   打开 taglist 窗口里, 在 Vim 缓冲区里所有的文件里，所有定义过
   的 tags 会以列表形式显示在 taglist 窗口. 当你编辑文件, 新定义
   的 tags 会被添加到 taglist 窗口. 你可以 taglist 窗口选择一个
   tag 并通过它跳转.  当前的 tag 会在
   taglist 窗口高亮显示.当你不在需要这个窗口时
   你可以关闭 taglist 窗口 .
2. 你可以配置 taglist 插件 持续去处理  
   所有 编辑完的文件里的 tags . 在这个配置里, 甚至 taglist 窗口 
   是关闭的 和 taglist 菜单没有显示, taglist 插件也会 
   处理新编辑的文件的 tags . 你可以在你需要选择一个 tag 时打
   taglist 窗口,选完后自动关闭 
   taglist 窗口 .
3. 你可以配置 taglist 插件， 在taglist 窗口 
   只显示当前文件所定义了的 tags . 默认状态下, taglist 插件
   显示 Vim 缓冲区列表里的全部文件里所定义的 tags . 当你
   切换文件时, taglist 窗口 会刷新并只显示
   当前文件所定义的 tags .
4. 在 GUI Vim 里, 你可以使用 Tags 下拉弹出菜单(这个菜单由 taglist 
   插件生成) 里显示的当前文件定义过的 tags 并通过选择其中一个
   tag 跳转到文件的位置. 如果使用菜单你可以不打开 taglist 窗口.
   默认状态下, Tags 菜单是禁用的.
5. 你可以配置 taglist 插件 显示当前的 tag 名称
   在 Vim 窗口状态栏上或者在 Vim 窗口标题栏. 不打开
   窗口或者菜单而实现这个功能, 你需要配置 taglist
   插件每次打开新文件时都去处理定义在文件里 tags .
6. 你可以保存定义在多个文件里的 tags 到时一个 taglist 会话文件里
   并在你需要时重载. 你也可以配置 taglist 插件 不
   更新 taglist 窗口，当你编辑新文件时. 你还可以手动添加
   文件到 taglist 窗口.

打开 taglist 窗口~
你现在可以使用  ":TlistOpen" 或者  ":TlistToggle" 命令打开 taglist 窗口 
 ":TlistOpen" 命令可以 打开 并跳转到 taglist 窗口.
 ":TlistToggle" 打开或者关闭 (切换) taglist 窗口 且 
光标保持在当前窗口. 如果 'Tlist_GainFocus_On_ToggleOpen'
参数设置成 1, 那么 ":TlistToggle" 打开 taglist 窗口
并移动光标到 taglist 窗口.

你可以映射一个按键到这些命令. 举个例子, 以下的命令可以
在普通模式下映射到 <F8> 按键 来切换 taglist 窗口.
>
	nnoremap <silent> <F8> :TlistToggle<CR>
<
添加上面的映射到你的 ~/.vimrc 或者 $HOME/_vimrc 文件.

想在 Vim 启动时自动打开 taglist 窗口, 设置
'Tlist_Auto_Open' 参数为 1.

你也可通过如下命令在启动 Vim 时打开 taglist 窗口
:
>
	$ vim +TlistOpen
<
关闭 taglist 窗口~
你可以关闭 taglist 窗口 通过在 taglist 窗口 按 'q' 键 或者
使用 Vim ":q" 命令. 你也可以其它 Vim 窗口 命令 去
关闭 taglist 窗口.  当 taglist 窗口 打开时通 你可以通
过 ":TlistToggle" 命令关闭 taglist 窗口. 你也可以用
":TlistClose" 命令直接 关闭 taglist 窗口.

当选择完一个文件或者 tag 时，如果你想自动关闭 taglist 窗口。 你
可以设置 'Tlist_Close_On_Select' 参数为 1 .   当
taglist 窗口 还存在时想直接退出 Vim, 设置 'Tlist_Exit_OnlyWindow' 参数为 1.

Jumping to a tag or a file~
你可以在 taglist 窗口里，在一个 tag 名称上通过按 <Enter> 键
或者 双击鼠标左键 选择一个 tag. 如果你想通过单击跳转一个 tag ,
设置 'Tlist_Use_SingleClick' 参数为 1.

如果选择的文件已经在窗口打开, 那么光标就会直接移动到
那个窗口.如果文件是没有打开过的，那么文件打开的位置会在
taglist 插件 之前作用的那个窗口。
如果全部窗口都是未使用的, 那么文件会在一个
新窗口打开. 文件不会在特殊的窗口打开，如 quickfix
窗口, 预览窗口和当 'buftype' 选项设置的含有缓冲文件的
窗口。

跳转一个 tag 并在新窗口打开文件, 按 'o' 键。 打开一个文件并使用之前的
窗口(Ctrl-W_p)用 'P' 键. 你可以按 'p' 键跳转
到当前的 tag 但光标保持在 taglist 窗口 (预览).

用标签页打开一个文件, 用 't' 键.  如果文件已经在一个标签页打开
那么光标会移动到这个标签页，否则文件会在
一个新的标签页打开. 打开一个新的标签页并跳转到一个 tag 按 <Ctrl-t> .
那么 taglist 窗口会自动打开并新建一个标签页.

如果不是想跳转到一个 tag ,你只想打开一个文件，那么在文件名上按 <Enter> 键
或者用鼠标双击文件名.

在 taglist 窗口里, 你可以用 [[ 或者 <Backspace> 键 跳转到
之前文件的开始位置. 你可以用 ]] 或者 <Tab> 键跳转
下一个文件开始的位置. 当你去到第一个或者最后一个文件时, 搜索就会
到回并跳转到 之后/之前 的文件.

高亮当前 tag~
Taglist 插件 自动高亮当前 tag 的名称 在
taglist 窗口里. 通过Vim的 |CursorHold| autocmd 事件实现此功能. 如果
当前的 tag 名不在 taglist 窗口里的可视范围内, 那么 taglist 窗口
上下卷动使 tag 名可见. 你也可以
":TlistHighlightTag" 命令 强制高亮当前 tag.

The tag name is highlighted if no activity is performed for |'updatetime'|
milliseconds. 这个选项在 Vim 里的默认值是 4 秒. 为了避免
出现不必要的问题, 你最好不要 设置 |'updatetime'| 选项为一个非常
低的值.

想要禁用自动高亮当前 tag 名 在 taglist
窗口里, 设置 'Tlist_Auto_Highlight_Tag' 参数为 0.

当进入一个 Vim 缓冲区/窗口, taglist 插件自动高亮
所进入 缓冲区/窗口 的当前 tag .  如果你想禁用
进入缓冲区时自动高亮当前 tag 的功能, 设置
'Tlist_Highlight_Tag_On_BufEnter' 参数为 0.

添加多个文件到 taglist~
当 taglist 窗口 打开时, 所有在 Vim 缓冲区列表里文件会被
处理，如果是 taglist 支持的文件就会添加到 taglist 窗口.  当你在
Vim里编辑一个文件, taglist 插件 会自动处理这个文件并添加到
taglist 里. 如果你关闭 taglist 窗口, tag 信息 
会在 taglist 保留.

不打开 taglist 窗口 就处理文件的话, 设置
'Tlist_Process_File_Always' 参数为 1.

你可以手动添加多个文件到 taglist 里，并不用实际打开它们，使用
":TlistAddFiles" 和 ":TlistAddFilesRecursive" 命令.

举个例子, 添加所有 /my/project/dir 目录下所有的 C 文件到
taglist, 你可以用以下命令:
>
	:TlistAddFiles /my/project/dir/*.c
<
Note 当添加的文件带有很多 tags 或者 添加一大堆
文件时, 那么要花费几秒到几分钟的时间给
taglist 插件 去处理这些文件. 你不应该中断 taglist
插件处理这些文件，通过按 <CTRL-C>.

你想从一个目录树递归地添加多个文件，使用
":TlistAddFilesRecursive" 命令:
>
	:TlistAddFilesRecursive /my/project/dir *.c
<
这个命令接受两个参数. 第一个参数指定你想递归添加文件所在的目录
. 第二个参数指定
通配符模板来选择你想添加的文件. 
默认的通配符模板是 * ，即添加目录下所有的文件.

只显示一个文件的 tags ~
Taglist 窗口 默认显示 Vim 缓冲区里所有文件 tags
和所有手动添加文件的 tags . 如果只想显示当前
活动缓冲区的 tags , 设置 'Tlist_Show_One_File' 参数为 1.

从 taglist 里移除文件~
当光标在 taglist 窗口里并在文件的其中一个 tag 上，按 'd' 键
你可以在 taglist 窗口移除一个文件(不显示这个文件的 tags ). 
在当前 Vim 会话中 移除的文件将不会显示
在 taglist 窗口.如果想再次显示这个文件在 tags , 在一个 Vim 窗口打开这个文件
然后使用 ":TlistUpdate" 命令 或者 ":TlistAddFiles" 命令
重新将这个文件添加到 taglist 里.

当缓冲文件从 Vim 缓冲区文件列表里 通过 ":bdelete" 或者 
":bwipeout" 命令 移除, taglist 会更新并移除为这些缓冲文件
保存的信息.

修改文件后更新显示 tags ~
Taglist 插件会持续跟踪文件修改的次数. 当文件修改次数
变更时 (文件已被修改), Taglist 插件
自动更新文件的 tags . 文件修改次数
是你在打开一个包含这个文件的窗口 和 当你重新
加载这个文件的时候进行检测.

你也可以通过在 taglist 窗口里按 "u" 键  更新或者刷新
文件的 tags . 如果一个已存在的文件被修改和
保存后, taglist 插件 自动更新这个文件
的 tags .

你也可以 使用 ":TlistUpdate" 命令 去 更新 当前缓冲文件
的 tags 在你对它作出更改后. 你应该保存修改后的缓存文件
在你更新 taglist 窗口前. 否则 tags 的列表里将不会有
当前缓存文件新建的 tag .

在 taglist 窗口里，如果你不小心按 'd' 键
删除了一个文件的 tags , 你想再次显示这个文件的 tags 使用
":TlistUpdate" 命令.

控制 taglist 的更新方式~
禁用自动处理一个新的文件或者修改过的文件, 你可以
设置 'Tlist_Auto_Update' 参数为 0 .当这个参数设置为
 0 时, taglist 只会在你使用 ":TlistUpdate" 命令 或者
":TlistAddFiles" 或者 ":TlistAddFilesRecursive" 命令时才更新. 
这个选项可以让你控制那些文件应该添加到 taglist 里，（而那些不应该）.

你可以 使用 ":TlistLock" 命令 去 锁定 taglist 内容. 执行完这个
命令后, 新的文件将不会自动添加到 taglist 里.
当 taglist 锁定时, 你可以用 ":TlistUpdate" 命令 添加当前
文件 或者 ":TlistAddFiles" 或者 ":TlistAddFilesRecursive" 命令 
添加新文件到 taglist 里. 解锁 taglist, 用":TlistUnlock"
命令.

显示 tag 原型结构~
在 taglist 窗口里，光标所在的 tag 上,
按 空格键. 在 taglist 窗口里 如果光标
保持在 tag 名称上保持不动的话
 那么 tag 的原型结构会在 Vim 状态栏 显示
|'updatetime'| 微秒.  |'updatetime'| 选项在 Vim
里的默认值是 4 秒.

你可以一个 tag 的名称和原型结构而不用打开 taglist 窗口
你只要在 taglist 菜单里使用 ":TlistShowTag" 和 ":TlistShowPrototype"
命令. 这些命令只有在当前文件已在 taglist 打开，才能正确工作.
使用这些命令而不打开 taglist 窗口, 设置
 'Tlist_Process_File_Always' 参数为 1.

你可以使用 ":TlistShowTag" 命令显示 某个文件指定行数或指定行数之前 tag 名称.
如果这个文件不支持或
指定行数不支持显示, 那么 这个 命令将显示当前
 tag 的名称. 举个列子,
>
	:TlistShowTag
	:TlistShowTag myfile.java 100
<
你可以 使用 ":TlistShowPrototype" 某个文件指定行数或指定行数之前 tag 原型结构.
如果这个文件不支持或
指定行数不支持显示, 那么 这个 命令将显示当前
 tag 的原型结构. 举个列子,
 >
	:TlistShowPrototype
	:TlistShowPrototype myfile.c 50
<
在 taglist 窗口, 当鼠标移动到一个 tag 姓名之上, 这个 tag
的原型结构会显示在弹窗提示时. 这个功能只能工作在 GUI 版本，
并且这个版本支持弹窗提示.

Taglist 窗口的内容~
Taglist 窗口包含各式各样的文件定义的 tags  并通过
文件名各 tag 类型 (参数, 函数,类, 等等.).
对于那些包含 作用域信息 (如类成员, structures inside
structures, 等等.), 作用域信息会以方括号 "[]" 包裹
显示在 tag 名称之后.

taglist 缓冲区/窗口的内容是由 taglist 插件进行管理.
taglist 缓冲区  |'filetype'| 设置为 'taglist'. 对于 taglist 缓冲区  Vim
|'modifiable'| 选项设置为关闭 . 你不应该 
手动编辑 taglist 缓冲区, 更改 |'modifiable'| 标识. 如果你
手动编辑 taglist 缓冲区 内容, 那么 taglist 插件 将会
与 taglist 缓冲区内容失去同步然后 taglist 插件将不能正常工作.
再次重新显示 taglist 缓冲区内容 , 关闭 taglist
窗口 然后重新打开.

打开和关闭 tag 和目录树~
在 taglist 窗口里, tag 名称 是以可折叠目录树形式呈现的
使用了 Vim 折叠功能. 你可以用 '-' 键折叠目录树 也可以用
Vim 的 |zc| 折叠命令. 你可以用 '+' 键展开目录树 也可以用
Vim 的 |zo| 折叠命令. 你可以用 '*' 键展开所有的折叠也可以用
Vim 的 |zR| 折叠命令. 你还可以用鼠标打开/关闭
折叠. 你可以用 '=' 关闭所有折叠. 在 taglist 窗口里，
你不要手工建立 或者 删除折叠.

在 taglist 窗口里，想自动关闭非激活文件/缓冲区折叠，
只展开当前缓冲区的折叠 , 设置
'Tlist_File_Fold_Auto_Close' 参数为 1.

对文件的 tags 进行排序~
在 taglist 窗口里的 tags 可以按名称排序，也可以
按时间空间排序.默认排序方式是以 tag 在文件里
出现的先后顺序进行排列. 你可以改变默认排序方式通过
设置 'Tlist_Sort_Type' 参数为 "name" 或者 "order".在 taglist 窗口里，
你可以按 "s" 键 让 tags 按名称排序.
你再次按 "s" 键 让 tags 按时间空间排序。
在 taglist 窗口里的不同的文件可以按不同的方式进行排序.

缩放 taglist 窗口~
在 taglist 窗口里 你可以按 'x' 键 最大化 taglist
窗口 宽度/高度. 它的窗口将放大到最大可用的
宽度/高度而不用关闭已存在的窗口. 你可以再按
'x' 键恢复到默认的 宽度/高度.

						*taglist-session*
Taglist 会话~
一个 taglist 会话 指的 在一个 Vim 会话里，
taglist 保存的是多个文件和它们的 tags .

你可以保存和恢复一个 taglist 会话 (和所有显示的 tags) 通过使用
":TlistSessionSave" 和 ":TlistSessionLoad" 命令.

保存在 taglist 里 tags 信息和文件到一个文件, 
使用 ":TlistSessionSave" 命令并指定文件名:
>
	:TlistSessionSave <file name>
<
恢复一个保存的 taglist 会话, 使用 ":TlistSessionLoad" 命令: >

	:TlistSessionLoad <file name>
<
当你加载一个 taglist 会话文件时, 保存在文件里的 tags 将会
添加到已当前已保存的 taglist 里.

taglist 会话功能多用于保存巨大文件生成的 tag  或者 一
组常用常用文件(如一个工程)生成的 tags . 通过使用 taglist 会话
文件, 你可以最小化 taglist 加载/刷新 多个文件
所须的时间。

你可以为多组文件建立多个 taglist 会话
文件.

在 Vim 状态栏或者 window 标题栏里显示 tag 名称~
你可以使用 taglist插件提供的 Tlist_Get_Tagname_By_Line() 函数在 Vim 状态栏 
或者 window 标题栏显示当前的 tag 名称.
同样的, 你可以用 the Tlist_Get_Tag_Prototype_By_Line()
函数在 Vim 状态栏 或者 window 标题栏显示当前 tag 原型结构.

举个例子, 以下命令可以用来在显示当前 tag 名称到
Vim 状态栏里:
>
	:set statusline=%<%f%=%([%{Tlist_Get_Tagname_By_Line()}]%)
<
以下命令可以用来在显示当前 tag 名称到
window 标题栏:
>
	:set title titlestring=%<%f\ %([%{Tlist_Get_Tagname_By_Line()}]%)
<
Note 一点 显示当前 tag 名称到上述位置，当前文件必须经过
taglist 插件处理. 实现这个功能, 你必须设置
'Tlist_Process_File_Always' 参数为 1 或者 打开 taglist 窗口 或者 使用
taglist 菜单. 想得到更多配置 Vim 状态栏的信息,
参考 Vim |'statusline'| 选择的文档.

更改 taglist 窗口高亮~
以下 Vim 高亮 (函数？命令？)组 已由 taglist 预定义 并用于高亮
在 taglist 窗口里不同的条目:

    TagListTagName  - 用于 tag 名称
    TagListTagScope - 用于 tag 作用域
    TagListTitle    - 用于 tag 标题
    TagListComment  - 用于 注释
    TagListFileName - 用于 文件名

默认情况下, 这些高亮组已经关联到 Vim 的标准高亮
组中. 如果你想更改这些高亮组的颜色,
在高亮组名称前添加 'My' 前缀并在你的 .vimrc 或者
.gvimrc 文件里设置: MyTagListTagName, MyTagListTagScope, MyTagListTitle,
MyTagListComment 和 MyTagListFileName.  举个例子, 改变
tag 名称高亮, 你可以用以下命令:
>
    :highlight MyTagListTagName guifg=blue ctermfg=blue
<
控制 taglist 窗口~
你想使用水平分割的 taglist 窗口, 而不是垂直分割的
窗口, 设置 'Tlist_Use_Horiz_Window' 参数为 1.

在 Vim 最右边的窗口打开一个垂直分割 taglist 窗口，
设置 'Tlist_Use_Right_Window' 参数为 1.

你可以指定垂直分割 taglist 窗口的宽度, 通过设置
'Tlist_WinWidth' 参数.  你可以指定垂直分割 taglist 窗口的高度,
 通过设置 'Tlist_WinHeight' 参数.

当打开一个垂直分割的 taglist 窗口时, Vim 窗口宽度会
增加以容纳新打开的 taglist 窗口. 当 taglist 窗口
关闭时, Vim 窗口宽度会减少. 禁用这个功能, 设置
'Tlist_Inc_Winwidth' 参数为 0.

减少在 taglist 窗口里空白的行数, 设置
'Tlist_Compact_Format' 参数为 1.

在 taglist 窗口里 不显示 Vim 折叠(功能)列 , 设置
'Tlist_Enable_Fold_Column' 参数为 0.

在 taglist 窗口里 显示 tag 原型结构而不是 tag 名称 ,
设置 'Tlist_Display_Prototype' 参数为 1.

不想在 tag 名称旁显示 tag 的作用域, 设置
'Tlist_Display_Tag_Scope' 参数为 0.

						*taglist-keys*
Taglist 窗口按键列表~
以下列表 罗列了在 taglist 窗口里可用按键的
功能描述.

  按键          描述~

  <CR>          跳转到光标所在 tag 定义的位置
  o             打开新窗口并跳转到光标所在 tag 定义的位置
  P             Jump to the tag in the previous (Ctrl-W_p) window.
  p             Display the tag definition in the file window and
                keep the cursor 在 taglist 窗口里 itself.
  t             打开一个新标签页并跳转 tag . 如果文件已经在一个
                标签页打开, 移动到那个标签页.
  Ctrl-t	打开一个新标签页并跳转 tag .
  <Space>       显示光标所在 tag 的原型结构.
  		对于文件名,显示完整的路径,文件
		类型和 tags 的数量. 对于 tag (类型), 显示
		tag 的类型和 tags 数量.
  u             更新在 taglist 窗口里的 tags .
  s             更改 tags 排列顺序 (按名称 name 或者按时间空间 order)
  d             移除光标所在的 tag (从属于某个文件） 
  x             绽放 taglist 窗口
  +             展开一个折叠
  -             关闭一个折叠
  *             打开所有折叠
  =             关闭所有折叠
  [[		跳转到前一个文件开始的位置
  <Backspace>	跳转到前一个文件开始的位置
  ]]		跳转到下一个文件开始的位置
  <Tab>		跳转到下一个文件开始的位置	
  q             关闭 taglist 窗口
  <F1>          显示帮助

上述按键在 普通模式 和 插入模式 都能用.

						*taglist-menu*
Taglist 菜单~
当使用 GUI Vim 时, taglist 插件能通过下拉菜单和弹出菜单来显示
当前文件所定义的 tags . 默认情况下, 这个
功能是关闭的. 如想打开这个功能, 设置 'Tlist_Show_Menu'
参数为 1.

你可以通过菜单选择一个 tag 名称来跳转 tag. 你使用的
taglist 菜单是独立于 taglist 窗口的，也就是说你不须要打开
taglist 窗口 来获得 taglist 菜单.

当你在多个文件/缓冲区切换时, taglist 菜单会自动更新
显示当前文件/缓冲区所定义的 tags .

这些 tags 是按它们的类型 (参数, 函数, 类, 方法,
etc.)进行分组并且不同类型通过分隔符分开. 如果某个文件
全部所定义的 tags 类型(e.g. 函数)相同, 是不会有
分隔符的.

如果子菜单的条目超过
'Tlist_Max_Submenu_Items' 参数所指定的值, 那么子菜单将会分离成多个子菜单. 
'Tlist_Max_Submenu_Items' 默认值是 25.
The first and last tag names in the submenu are used to form the submenu name.
菜单条目会添加数字和字母前缀，方便通过
键盘进行选择.

如果弹出菜单支持是启用的 ( |'mousemodel'| 选项包含
"popup"), 那么 tags 菜单会添加到弹出菜单. 你可以
在 GUI window 通过右击鼠标 访问弹出菜单.

你可以 重新生成 tags 菜单，通过 'Tags->Refresh menu' 条目.
你可以 让菜单里的 tags 按 名称name 或者 时间空间order 排序，
通过选择 'Tags->Sort menu by->Name/Order' 菜单条目.

你可以分离出 Tags 菜单 并让它置于 Vim window 旁，
这样你就可以快速定位 tags.

让 taglist 插件 和 winmanager 插件协同工作~
你可以让 taglist 插件 和 winmanager 插件协同工作. 这样允许你同时在不同的窗口
使用文件浏览器, 缓冲区浏览器和 taglist 插件 .
同时使用 taglist 插件 和 winmanager
插件,  在 'winManagerWindowLayout' 参数里设置 'TagList'. 
举个例子,同时使用文件浏览器插件和 taglist 插件, 使用
以下设置: >

	let winManagerWindowLayout = 'FileExplorer|TagList'
<
获取帮助~
如果你安装了 taglist 帮助文件 (就是这个文件), 那么你可以用使用
Vim ":help taglist-<keyword>" 命令来获取 taglist 各种不同
主题的帮助.

你可以在 taglist 窗口里按 <F1> 键 来显示
关于使用 taglist 窗口的帮助信息. 如果你再次按 <F1> 键,
这些帮助信息就会从 taglist 窗口里移除.

						*taglist-debug*
Debugging taglist 插件~
在 taglist 插件里你可以使用 ":TlistDebug" 命令来启用除错信息记录.
显示已记录的除错信息, 你可以用
":TlistMessages" 命令.禁用除错信息记录, 使用
":TlistUndebug" 命令.

你可以用 ":TlistDebug" 命令 指定一个文件来记录除错
信息. 否则, 这些除错信息会记录在一个局部脚本的参数里.
权衡弊利, 为最小化内在占用, 只有最后 3000
字节 debug 信息会保存.

==============================================================================
						*taglist-options*
6. 选项~

以下 Vim 参数可以控制 taglist 插件的运行状态. 
这些参数会初始化为默认值. 改变这些参数你就
可以改变 taglist 插件运行状态. 你想改变 taglist 插件运行状态
才需要更改设置. 你
应该在你的 .vimrc 文件应，使用 |:let| 命令来更改
这些参数.

可配置的 taglist 参数罗列在下面。 想了解
这些参数的功能描述参考以下在列表中的文本.

|'Tlist_Auto_Highlight_Tag'|	在 tgalist 里自动高亮当前 tag.
|'Tlist_Auto_Open'|		当 Vim 启动时 打开 taglist 窗口.
|'Tlist_Auto_Update'|		新加入编辑文件时自动更新 taglist .
|'Tlist_Close_On_Select'|	选择完一个文件或者 tag 后自动关闭 Taglist 窗口.
|'Tlist_Compact_Format'|	移除 在 taglist 窗口里额外的信息和空白行。
|'Tlist_Ctags_Cmd'|		指定 ctags 工具所在目录.
|'Tlist_Display_Prototype'|	在 Taglist 窗口里显示 Tag 原型结构
|'Tlist_Display_Tag_Scope'|	在 tag 名称后显示其作用域.
|'Tlist_Enable_Fold_Column'|	在taglist 窗口里显示折叠指示列 .
|'Tlist_Exit_OnlyWindow'|	taglist 窗口是唯一窗口时关闭 Vim.
|'Tlist_File_Fold_Auto_Close'|	非激活缓冲区 自动折起 tag 折叠.
|'Tlist_GainFocus_On_ToggleOpen'|
				Taglist 窗口打开时将光标移过去.
|'Tlist_Highlight_Tag_On_BufEnter'|
				进入一个缓冲区时, 自动高亮当前 tag .
|'Tlist_Inc_Winwidth'|		增加 Vim 窗口的宽度去容纳 taglist 窗口.
|'Tlist_Max_Submenu_Items'|	tag 子菜单最大条目数.
|'Tlist_Max_Tag_Length'|	tag 菜单条目最大长度.
|'Tlist_Process_File_Always'|	即使 taglist 窗口是关闭的也进行文件处理 
|'Tlist_Show_Menu'|		显示 tags 菜单.
|'Tlist_Show_One_File'|		只显示当前缓冲区文件 tag .
|'Tlist_Sort_Type'|		排序 tags 的方式.
|'Tlist_Use_Horiz_Window'|	使用水平分割的 Taglist 窗口.
|'Tlist_Use_Right_Window'|	Taglist 窗口屏幕左边打开.
|'Tlist_Use_SingleClick'|	单击跳转 tag .
|'Tlist_WinHeight'|		水平分割 taglist 窗口 的高度.
|'Tlist_WinWidth'|		垂直分割 taglist 窗口 的宽度.

						*'Tlist_Auto_Highlight_Tag'*
Tlist_Auto_Highlight_Tag~
taglist 插件 在 taglist 窗口里自动高亮当前 tag .
如果你想禁用这功能, 那么你可以设置
'Tlist_Auto_Highlight_Tag' 参数为 0. Note 就算当前
tag 高亮是禁用的, 新文件的 tags 仍会添加到
taglist 窗口里.
>
	let Tlist_Auto_Highlight_Tag = 0
<
以上参数为 1 时, 你可以用 ":TlistHighlightTag" 命令
来高这当前的 tag.

						*'Tlist_Auto_Open'*
Tlist_Auto_Open~
 当你启动 Vim 时,自动打开 taglist 窗口, 你可以设置
'Tlist_Auto_Open' 参数为 1. 默认情况下,这个参数是设为 0,
taglist 窗口 将不会在 Vim 启动时自动打开.
>
	let Tlist_Auto_Open = 1
<
taglist 窗口只有在文件类型支持时才会在 Vim 启动时自动打开。
举个例子, 如果你打开 text 文件, taglist 窗口 是
不会打开的.

						*'Tlist_Auto_Update'*
Tlist_Auto_Update~
当编辑一个新文件时, 定义在文件里的 tags 会自动被
处理然后添加到 taglist 里.要停止添加新文件到 taglist 里,
设置 'Tlist_Auto_Update' 参数为 0. 默认情况下, 这个参数设为
 1.
>
	let Tlist_Auto_Update = 0
<
以上参数为 1 时, 你可以用 the ":TlistUpdate" 命令 
添加当前文件定义的 tags 到 taglist里.

						*'Tlist_Close_On_Select'*
Tlist_Close_On_Select~
选完一个文件和 tag 后自动关闭 窗口 , 那么
设置 'Tlist_Close_On_Select' 参数为 1. 默认情况下, 这个参数
设置为 0 也就是说，当你在 taglist 窗口里选完一个文件或者 tag 后, 窗口
是不关闭的.
>
	let Tlist_Close_On_Select = 1
<
						*'Tlist_Compact_Format'*
Tlist_Compact_Format~
默认情况下,在 taglist 窗口里 空行是用来分隔一个文件不同类型的 tag 
或者不同文件的 tag . 如果
你想在 taglist 窗口里显示尽可能多的 tags, 你可以
设置 'Tlist_Compact_Format' 参数为 1 来获得紧凑的显示方式.
>
	let Tlist_Compact_Format = 1
<
						*'Tlist_Ctags_Cmd'*
Tlist_Ctags_Cmd~
'Tlist_Ctags_Cmd' 变量用于指定 exuberantctags 
位置和路径. 如果 exuberant ctags 在操作系统
PATH 环境变量所指定的任意一个目录下, 那么这个变量是不须要设置的.

exuberant ctags 工具可以用不同的名称进行安装. 当 
taglist 插件启动时, 如果 'Tlist_Ctags_Cmd' 参数没有设定, 它会
检测 exuberant-ctags, exctags, ctags, ctags.exe and tags 在
PATH 环境变量指定的路径里. 如果找到上述命名的 executable ,
那么 Tlist_Ctags_Cmd 参数会设置为上述名称.

如果 exuberant ctags 不在操作系统
PATH 环境变量所指定的任意一个目录下, 那么要将此参数为 
ctags 工具在你系统中具体的位置. Note that 这个参数应设为
exuberant ctags 完整的路径和文件名 而不是
exuberant ctags 安装路径. 如果 exuberant ctags 工具没有在
 PATH 或者指定位置找到, 那么 taglist 插件 将不会
加载. 示例:
>
	let Tlist_Ctags_Cmd = 'd:\tools\ctags.exe'
	let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
<
						*'Tlist_Display_Prototype'*
Tlist_Display_Prototype~
默认情况下,  在 taglist 窗口里只会显示 tag 名称. 如果你想
显示原型结构而不是名称, 设置 'Tlist_Display_Prototype'
参数为 1. 默认情况下, 这个参数是设置为 0 也就是说只会显示
tag 名称.
>
	let Tlist_Display_Prototype = 1
<
						*'Tlist_Display_Tag_Scope'*
Tlist_Display_Tag_Scope~
默认情况下, tag (如一个 C++ 类) 的作用域 会在
 tag 名称后显示并用方括号包裹. 如果你不想显示 tag 
和作用域, 那么 设置 'Tlist_Display_Tag_Scope' 为 0 . 默认情况下,
这个参数是设置为 1 也就是说会显示 tag 的作用域.
>
	let Tlist_Display_Tag_Scope = 0
<
						*'Tlist_Enable_Fold_Column'*
Tlist_Enable_Fold_Column~
默认情况下, Vim 折叠指示列会启用并在 taglist
窗口里显示. 如果你想禁用这个功能 (举个例子, 你正用一个比较窄的
Vim 窗口 或者 终端工作), 你可以设置 'Tlist_Enable_Fold_Column'
参数为 0 .
>
	let Tlist_Enable_Fold_Column = 1
<
						*'Tlist_Exit_OnlyWindow'*
Tlist_Exit_OnlyWindow~
如果只剩下一个打开的 taglist 窗口 自动关闭 Vim , 那么
设置 'Tlist_Exit_OnlyWindow' 参数为 1. 默认情况下, 这个参数是设置为
0 也就是说如果只剩下一个打开的 taglist 窗口 Vim 
是不会立即关闭的.
>
	let Tlist_Exit_OnlyWindow = 1
<
						*'Tlist_File_Fold_Auto_Close'*
Tlist_File_Fold_Auto_Close~
默认情况下, 所有打开文件 tags 目录树是显示在 taglist 窗口里。 
你可以手工 展开/折起 某个文件 tags 目录树 . 如想
自动折起非激活文件 tags 目录树, 你可以设置
'Tlist_File_Fold_Auto_Close' 参数为 1. 当这个参数是设置为 1 时,
当前缓冲区文件的 tags 目录树会自动打开，
其它缓冲区文件的则会关闭.
>
	let Tlist_File_Fold_Auto_Close = 1
<
					    *'Tlist_GainFocus_On_ToggleOpen'*
Tlist_GainFocus_On_ToggleOpen~
当 taglist 窗口 使用 ':TlistToggle' 命令打开时, 这个
选项 控制光标是否移动到 taglist 窗口或者停留在
当前窗口. 默认情况下, 这个选项设置为 0 也就是光标
保留在当前窗口. 当这个参数是设置为 1, 光标
在打开 taglist 窗口后移动到 taglist 窗口.
>
	let Tlist_GainFocus_On_ToggleOpen = 1
<
					    *'Tlist_Highlight_Tag_On_BufEnter'*
Tlist_Highlight_Tag_On_BufEnter~
当你进入 一个 Vim 缓冲区/窗口, 在缓冲区/窗口当前的 tag 会
在 taglist 窗口里自动高亮显示. 如果当前 tag 名称
在 taglist 窗口里不可见, 那么 taglist 窗口内容会上下
卷动使 tag 名称可见. 如果你想关闭 进入缓冲后自动
高亮当前 tag 的功能, 你可以 设置
'Tlist_Highlight_Tag_On_BufEnter' 参数为 zero. 
这个参数是默认设置为 1.
>
	let Tlist_Highlight_Tag_On_BufEnter = 0
<
						*'Tlist_Inc_Winwidth'*
Tlist_Inc_Winwidth~
默认情况下, 当窗口宽度小于100时，新打开的 taglist
窗口为垂直分割的窗口, 那么窗口宽度会按
 'Tlist_WinWidth' 所设置的参数值扩展成一个新的窗口. 
只有你使用垂直分割的 taglist 窗口时
才能设置这个参数.

如果的你终端 (运行在 Unix 系统下较早
版本的 xterm ) 不支持从 Vim 改变窗口宽度 或者 更改窗口宽度后
你可能在屏幕看见任何奇怪问题 或者 你不情愿
调整窗口的宽度 那么设置 'Tlist_Inc_Winwidth' 参数为 zero.
注意: 如果你是在 MS－DOS 命令窗口下保用 MS-Windows 版本的 Vim
那么你必须设置这个参数为 0 , 否则系统可能会挂起
原因  Vim 的限制 (帮助里有解释 :help win32-problems)
>
	let Tlist_Inc_Winwidth = 0
<
						*'Tlist_Max_Submenu_Items'*
Tlist_Max_Submenu_Items~
如果一个文件包含太多特定类型(函数,函数,
类, etc.)的 tags , 数目多过 'Tlist_Max_Submenu_Items' 参数所指定的
数量, 那么这个类型的 tag 的菜单会分割成多个
子菜单. 'Tlist_Max_Submenu_Items' 参数默认设置是
25.  以下命令可以改变 'Tlist_Max_Submenu_Items' 参数:
>
	let Tlist_Max_Submenu_Items = 20
<
子菜单的名称由那个子菜单 tag 
第一个和最后一个条目的名称组成.

						*'Tlist_Max_Tag_Length'*
Tlist_Max_Tag_Length~
只有 'Tlist_Max_Tag_Length' 设置的字母数  from the tag names will be
used to form the tag type submenu name. 这个参数是默认设置为
10.  改变 'Tlist_Max_Tag_Length' 这个设置 可以让你的菜单显示更多或者
更少的字母:
>
	let Tlist_Max_Tag_Length = 10
<
						*'Tlist_Process_File_Always'*
Tlist_Process_File_Always~
默认情况下, 当 taglist 窗口打开状态 或者 taglist 菜单启用状态 
taglist 插件才会生成和处理新打开的文件里定义的 tags .
当 taglist 窗口是关闭状态, taglist 插件
会停止处理新打开文件里定义的 tag .

你可以 设置 'Tlist_Process_File_Always' 参数为 1，
即使 taglist 窗口关闭状态 和 taglist 菜单没有启用 
taglist 也会生成
新文件的 tag 列表。 
>
	let Tlist_Process_File_Always = 1
<
如果你想不打开taglist 窗口或者 taglist 菜单就正常 
使用 ":TlistShowTag" 和 ":TlistShowPrototype" 命令,
你应该设置这个参数为 1.

						*'Tlist_Show_Menu'*
Tlist_Show_Menu~
当使用 GUI Vim, 你可以在名为 "Tags" 的菜单显示定义在文件里
的 tag . 默认情况下, 这个功能是关闭的. 打开这个
功能, 设置 'Tlist_Show_Menu' 参数为 1:
>
	let Tlist_Show_Menu = 1
<
						*'Tlist_Show_One_File'*
Tlist_Show_One_File~
默认情况下, taglist 插件会在 taglist 窗口里显示
所有加载到缓冲区文件里定义的 tags 
如果你只想显示当前缓冲区文件
的 tag , 那么你可以设置 'Tlist_Show_One_File' 为 1. 当
这个参数是设置为 1 时, 你切换缓冲区里的文件时, taglist 窗口
会刷新显示当前文件的 tags 
之前文件的 tags 会被移除.
>
	let Tlist_Show_One_File = 1
<
						*'Tlist_Sort_Type'*
Tlist_Sort_Type~
这个 'Tlist_Sort_Type' 参数指定 tags 在taglist 窗口排序方式.
 tags 可以按 它们的名称首字母进行排序或者
按 tag 在文件中出现的顺序进行排序 (时间空间顺序). 
默认情况下, tag 名称会按 tag 在文件中出现的顺序进行排序. 
你 在 taglist 窗口里可以按 "s" 键改变排序方式 
(从名称到时间或者从时间到名称) . 你也可以改变
默认排序方式，通过设置 'Tlist_Sort_Type' 为 "name" 或者 "order":
>
	let Tlist_Sort_Type = "name"
<
						*'Tlist_Use_Horiz_Window'*
Tlist_Use_Horiz_Window~
默认情况下, tag 名称会显示在一个垂直分割的窗口里. 如果你
想使用水平分割的窗口, 当时设置 'Tlist_Use_Horiz_Window'
参数为 1. 如果你在 MS-DOS 命令窗口下运行 MS-Windows 版本的 Vim,
那么你应该使用一个水平分割的窗口而不是垂直分割的窗口。
同理, 如果你使用在 Unix 系统里使用一个较早版本的 xterm 
并且 Unix 不支持改变 xterm 窗口宽度,  你应该使用
一个水平分割的窗口.
>
	let Tlist_Use_Horiz_Window = 1
<
						*'Tlist_Use_Right_Window'*
Tlist_Use_Right_Window~
默认情况下, 垂直分割的 taglist 窗口 会出现在左手边。
如果你想打开窗口时出现在右手边, 你可以设置
'Tlist_Use_Right_Window' 参数为 1:
>
	let Tlist_Use_Right_Window = 1
<
						*'Tlist_Use_SingleClick'*
Tlist_Use_SingleClick~
默认情况下, 当你使用鼠标左键双击一个 tag 名称时,
光标会跳转到这个 tag 在文件里定义的位置.
你可以设置 'Tlist_Use_SingleClick' 参数为 1， 
然后可以使用鼠标单击一个 tag 名称跳转. 默认情况下这个参数
是设置为 0 .
>
	let Tlist_Use_SingleClick = 1
<
源于 Vim 的一个 bug , 如果你设置 'Tlist_Use_SingleClick' 为 1 并尝试使用鼠标
调整 taglist 窗口大小时, Vim会崩溃. 这个问题在
 Vim 6.3 或者以后的版本得到解决. 同时,使用鼠标
调整 taglist 窗口大小, 你可以用普通的 Vim 命令来调整
taglist 窗口大小.

						*'Tlist_WinHeight'*
Tlist_WinHeight~
水平分割的 taglist 窗口默认高度是 10. 这是可以
更改的，通过调整 'Tlist_WinHeight' 参数:
>
	let Tlist_WinHeight = 20
<
 |'winfixheight'| 选项专为 taglist 窗口设定, 
 当打开新的 Vim 窗口或者已存在的窗口关闭时用于保持
 taglist 窗口高度 .

						*'Tlist_WinWidth'*
Tlist_WinWidth~
垂直分割的 taglist 窗口默认宽度 is 30. This  这是可以
更改的，通过调整 'Tlist_WinWidth' 参数:
>
	let Tlist_WinWidth = 20
<
Note that  |'winwidth'| 选择的值 决定
当前窗口最小的宽度. 如果你设置 'Tlist_WinWidth' 参数的值 
小于 |'winwidth'| 设置的值, 那么 Vim 会使用
 |'winwidth'| 选择的值.

当打开新的 Vim 窗口或者关闭已存在的窗口时,
 taglist 插件会尝试保持由 
'Tlist_WinWidth' 参数指定 taglist 窗口的大小.

==============================================================================
						*taglist-commands*
7. 命令~

taglist 插件提供了以下命令：

|:TlistAddFiles|	增加多个文件到 taglit
|:TlistAddFilesRecursive|
			递归的将文件加入到 taglist 中。
|:TlistClose|		关闭 taglist 窗口
|:TlistDebug|		开始记录 taglist 的调试信息
|:TlistLock|		停止向 taglist 中增加新文件
|:TlistMessages|	显示已记录的 taglit 插件的调试信息
|:TlistOpen|		打开并跳转到 taglit 窗口
|:TlistSessionSave|	把 taglist 中的文件和 tags 的信息保存到会话文件中
|:TlistSessionLoad|	把存储在会话文件中的文件和 tags 的信息加载到 taglist 中
|:TlistShowPrototype|	显示某个文件指定行数或指定行数之前 tag 原型结构.
|:TlistShowTag|		显示某个文件指定行数或指定行数之前 tag 名称.
|:TlistHighlightTag|	在 taglist 窗口里高亮当前 tag .
|:TlistToggle|		打开或者关闭 (切换) taglist 窗口.
|:TlistUndebug|		停止记录 taglist 除错信息.
|:TlistUnlock|		解锁又可以再添加新文件到 taglist 里.
|:TlistUpdate|		更新当前缓冲区文件的 tags .

						*:TlistAddFiles*
:TlistAddFiles {file(s)} [file(s) ...]
		增加一个或多个文件到 taglist 中。您也可以使用通配符来指定多个
		文件。如果文件名中有空格，要使用反斜线符号转义。
		例子：
>
		    :TlistAddFiles *.c *.cpp
		    :TlistAddFiles file1.html file2.html
<
		如果您指定了大量的文件，taglit 插件将花费大量的时间来处理。指
		的文件不能在 Vim 窗口中编辑，也不会增加到 Vim 的缓冲列表中。

						*:TlistAddFilesRecursive*
:TlistAddFilesRecursive {directory} [ {pattern} ]
		向 taglit 中递归增加指定目录 {directory} 下匹配规则
		{pattern} 的所有文件。如果没有指定 {pattern} ，就会指定为 '*'
		。如果要指定当前目录，就用 "." 代替 {directory}。如果指定目录
		名中有空格，您应该使用反斜线符号进行转义。
		例子:
>
		    :TlistAddFilesRecursive myproject *.java
		    :TlistAddFilesRecursive smallproject
<
		如果指定的目录树中有大量的文件，taglit 插件会花费大量的时间来
		进行处理。

						*:TlistClose*
:TlistClose	关闭 taglist 窗口。在任何 Vim 窗口中，该命令都是可以使用的。

						*:TlistDebug*
:TlistDebug [filename]
		形如记录 taglist 插件中的调试信息。如果指定了 {filename}，调
		试信息会储存到这个文件中。否则，调试信息会存到一个脚本的局部
		变量中。如果文件 {filename} 已经存在了，它会被覆盖掉。

						*:TlistLock*
:TlistLock
		锁定 taglist ,不处理新文件。执行这个命令后，新被编辑的文件不
		会增加到 taglist 中。

						*:TlistMessages*
:TlistMessages
		在一个窗口中显示来自于 taglist 插件的调试信息。仅当调试信息被
		记录到脚本的局部变量时，该命令才有效。

						*:TlistOpen*
:TlistOpen	打开并跳转到 taglist 窗口。如果 taglist 窗口没有打开，则创建
		该窗口。当该命令执行时，光标会移动到 taglist 窗口中。如果是第
		一次打开 taglist 窗口，缓冲列表里所有的文件都会被处理，taglist
		窗口会显示他们定义好的 tags 

						*:TlistSessionSave*
:TlistSessionSave {filename}
		保存指定文件的信息和 taglist 里的 tags .
		这个命令可以用来保存和恢复在 Vim 会话期间
		taglist 内容.

						*:TlistSessionLoad*
:TlistSessionLoad {filename}
		加载一个保存有文件和 tag 信息
		特定的会话文件到 taglist 里.

						*:TlistShowPrototype*
:TlistShowPrototype [filename] [linenumber]
		显示指定行或之前 tag 的原型结构
		如果文件名称和行数未指定，
		那么会使用当前文件当前行。
		一个 tag 可跨越多行从它定义的行开始
		到下一个 tag　之前的行. 这个命令
		显示此范围内任意行数的 tag 原型结构 

						*:TlistShowTag*
:TlistShowTag [filename] [linenumber]
		显示指定行或之前 tag 的名称
		如果文件名称和行数未指定，
		那么会使用当前文件当前行。
		一个 tag 可跨越多行从它定义的行开始
		到下一个 tag　之前的行. 这个命令
		显示此范围内任意行数的 tag 名称.

						*:TlistHighlightTag*
:TlistHighlightTag
		在 taglist 窗口里高亮显示当前 tag . 默认情况下,
		taglist 插件定期更新 taglist 窗口来
		高亮显示当前 tag. 这个命令可以用于强制
		taglist 插件去高亮显示当前 tag.

						*:TlistToggle*
:TlistToggle	打开或者关闭 (切换) taglist 窗口. 
		如果窗口是关闭的，打开taglist窗口. 
		如果 taglist 窗口是已经打开的，关闭taglist 窗口.
		如果 taglist 窗口 是第一次打开, 所有的 
		在缓冲区 列表的文件都会被处理，然后 tags 会
		显示在 taglist 窗口. 执行这命令后, 光标
		是不会从当前窗口移动到 taglist 窗口.

						*:TlistUndebug*
:TlistUndebug
		停止记录 taglist 插件的调试信息

						*:TlistUnlock*
:TlistUnlock
		解锁taglist，开始处理新的文件。

						*:TlistUpdate*
:TlistUpdate	
		更新当前缓冲区里的标签信息。这个命令可以用来重新处理当前的文件
		或缓冲区来得到标签信息。当 taglist 插件使用硬盘上的文件（而不
		是 Vim 缓冲区里显示的文件），在你保存更新 taglist 前，你应该保
		存已经修改的缓冲区。否则所列出的标签将不包括在缓冲区中新建的那
		些。当 taglist 窗口关闭的时候，你也可以使用这个命令。

==============================================================================
						*taglist-functions*
8. 全局函数~

Taglist 插件提供了几个全局函数可用于 taglist 插件与
其它的 Vim 插件进行互动. 这些函数功能
详细介绍如下.

|Tlist_Update_File_Tags()|		更新指定文件的 tags 
|Tlist_Get_Tag_Prototype_By_Line()|	返回指定文件指定行数或者
					指定行数之前 tag 的原型结构。
|Tlist_Get_Tagname_By_Line()|		返回指定文件指定行数或者
					指定行数之前 tag 的名称。
|Tlist_Set_App()|			设置控制 taglist 窗口
					应用的名称.

					    *Tlist_Update_File_Tags()*
Tlist_Update_File_Tags({filename}, {filetype})
		更新指定文件名 {filename}的 tag . 第二参数
		指定 Vim 文件的文件类型. 如果 taglist 插件
		没有事先处理文件, 那么 exuberant
		ctags 工具临时被要求生成此文件的 tags .

					    *Tlist_Get_Tag_Prototype_By_Line()*
Tlist_Get_Tag_Prototype_By_Line([{filename}, {linenumber}])
		返回指定行或之前 tag 的原型结构
		如果文件名称和行数未指定，
		那么会使用当前文件当前行。

					    *Tlist_Get_Tagname_By_Line()*
Tlist_Get_Tagname_By_Line([{filename}, {linenumber}])
		返回指定行或之前 tag 的名称
		如果文件名称和行数未指定，
		那么会使用当前文件当前行

					    *Tlist_Set_App()*
Tlist_Set_App({appname})
		设置控制 taglist 插件 窗口和缓冲区 插件的名称. 
		这个函数可用于将 taglist
		插件 和 Vim 其它插件整合在一起.

		举个例子, winmanager 插件和 Cream package 使用
		这个函数时要分别地指定 appname 为 "winmanager" 和
		"cream".

		默认情况下, taglist 插件是独立插件，自行
		控制 taglist 窗口和缓冲区. 如果 taglist 窗口
		是由额外插件控制, 那么必须设置为合适的
		appname .

==============================================================================
						*taglist-extend*
9.扩展~

Taglist 插件支持所有 exuberant ctags 工具所支持的编程语言,
它包括以下编程语言: Assembly, ASP, Awk, Beta, C,
C++, C#, Cobol, Eiffel, Erlang, Fortran, HTML, Java, Javascript, Lisp, Lua,
Make, Pascal, Perl, PHP, Python, Rexx, Ruby, Scheme, Shell, Slang, SML, Sql,
TCL, Verilog, Vim and Yacc.

你可以扩展 taglist 插件去添加新编程语言支持
也可以通过修改上面罗列的编程语言来添加.

你不要通过修改 taglist 插件的脚本文件来
支持新的编程语言. 你更新到新版本的 taglist 插件时，这些更改将会丢失。
相反，你应该遵循以下
所描述的说明扩展 taglist 插件.

你可以扩展 taglist 插件通过修改在 .vimrc 或者 _vimrc
文件里的参数. 这些参数名称取决于编程语言的名字和
下面描述.

对已支持编程语言进行修改~
对已支持编程语言进行修改, 你必在 ~/.vimrc 或者 $HOME/_vimrc 文件里须设置
tlist_xxx_settings 参数. 替换 xxx
为编程语言在 Vim 里的文件类型.  举个例子, 
要修改 perl 编程语言文件支持, 你必须设置 tlist_perl_settings
参数. 你修改 java 文件支持时, 你必须设置 tlist_java_settings 
参数.

想检测文件在 Vim 使用的文件类型名称, 
在包含文件的缓冲区里使用以下命令:

	:set filetype

上述命令会显示当前缓冲区文件在 Vim 的文件类型.

tlist_xxx_settings 参数可设置的值格式 如下

    <language_name>;flag1:name1;flag2:name2;flag3:name3

不同字段(filed) 用 ';' 号分开.

第一个字段(field) 'language_name' 是 exuberant ctags 使用的
某类编程语言文件的名称. 这个名称可能与 Vim 使用的文件类型的名称
不同. 举个例子, 对于 C++, 这个编程语言名称在 ctags is 'c++' 但
在 Vim 文件类型名称是 'cpp'. 获取  exuberant ctags　支持的
编程语言文件列表, 使用以下命令:

	$ ctags --list-maps=all

余下的字段(fields) 遵循格式 "flag:name". 其中的
子字段 'flag' 是语言文件特殊的标记用于给 
exuberant ctags 生成相对应的 tags. 举个例子, 对于 C 语言,
只列出函数, 使用 'f' 标记. 罗列出不同编程语言由 exuberant ctags 
工具所支持的特殊标记，使用以下命令:

	$ ctags --list-kinds=all

子字段 'name' 指定标题文本 用于显示 
特定类型的 tags . 
举个例子, 'name' 可以设为 'functions'. 这个
字段可以设为任意文本字符串.

举个例子, 只列出定义在一个 C++ 语言文件里的类和函数
添加以下命令行到你的 .vimrc 文件里:

	let tlist_cpp_settings = 'c++;c:class;f:function'

在上面的设置中, 'cpp' Vim 文件类型名称而 'c++' 是
exuberant ctags 工具使用的语言名称. 'c' 和 'f' 是特殊标记传递给
exuberant ctags 列出 C++ 的类和函数， 'class' 是用于给
类 tags 在 taglist 窗口里显示的标题 而 'function' 是用于
给函数 tags 在 taglist 窗口里显示标题

举个例子, 只显示定义在一个 C 文件里的函数并使用 "My
Functions" 作为函数 tags 标题 , 使用

	let tlist_c_settings = 'c;f:My Functions'

当你设置 tlist_xxx_settings 参数后, 你将会覆盖 taglist 插件
对于 'xxx' 语言默认设置. 你不可以添加针对一种特定文件类型
默认选项到 taglist 插件 . 添加针对一种编程语言的选项到
taglist 插件, 从 taglist 插件文件复制这些选项的值
到你的 .vimrc 并修改它.

为新的编程语言添加支持~
如果你想添加一种新的编程语言支持到 taglist 插件, 你首先须要
扩展 exuberant ctags 工具. 获取更多关于扩展 exuberant ctags 的
信息, 浏览以下网页:

    http://ctags.sourceforge.net/EXTENDING.html

添加一种新的编程语言, 如上描述那样合适地 设置~/.vimrc 文件里的
 tlist_xxx_settings 参数. 替换参数里的 'xxx' 为
新语言在 Vim 里的文件类型名称.

举个例子,扩展 taglist 插件去支持 latex 语言, 你可以
使用以下命令行 (假设, 你已经扩展 exuberant
ctags 支持 latex 语言):

	let tlist_tex_settings='latex;b:bibitem;c:command;l:label'

使用上面的命令行, 当你在 Vim 里编辑文件类型为 "tex" 的文件时, taglist
插件会调用 exuberant ctags 工具，并传递 "latex" 文件类型和
特殊标记 b, c 和 l 给它去生成 tags. 文本标题 'bibitem',
'command' 和 'label' 会分别在 taglist 窗口里归类显示 
通过特殊标记 b, c 和 l 生成的 tags  .

==============================================================================
						*taglist-faq*
10. 常见问题~

问：taglist 插件不能用。taglist 窗口是空白的，文件中定义好的 tags 不显示。
答：你是洁使用的是 Vim 6.0 或更高的版本？taglist 插件信赖一些 vim 6.0 或更高的
    版本才支持的特性。您可以使用下面的命令得到 Vim 的版本：
>
	$ vim --version
<
    您正在使用 exuberant ctags 5.0 或更高的版本嘛？ taglist 插件依赖于
    exuberant ctags 支持的特性，而与 GUN ctags 或 Unix ctags utility 是不起作
    用的。您能使用下面的命令来判定您系统里安装的 ctags 是否是 exuberant
    ctags：
>
	$ ctags --version
<
    是否 exuberant ctags 出现在你系统的 PATH 目录中？如果没有，您需要设定
    Tlist_Ctags_Cmd 变量来指向 exuberant ctags 的位置。使用下面的 Vim 命令来验
    正设置是否正确：
>
	:echo system(Tlist_Ctags_Cmd . ' --version')
<
    上面的命令应该显示 exuberant ctags 的版本信息。   

    您是否打开了 Vim 的文件类型侦测？ taglist 插件信赖于由 Vim 侦测的文件类型
    并将之传递给 exuberant ctags 来解析 tags 。检查下面 Vim 命令的输入：
>
	:filetype
<
    上面命令的输出应该包含 "filetype detection:ON" 。如查要打开文件类型侦测功
    能，请把下面一行增加到 .vimrc 或 _vimrc 文件中：
>
	filetype on
<
    您的 Vim 版本中是否编译入了 system() 函数功能支持？下面的 Vim 命令应该会显
    示 1：
>
	:echo exists('*system')
<
    在一些 Linux 发行版中 (尤其是 Suse Linux )，默认的 Vim 安装是没有编译
    system() 函数支持的。taglist 插件使用 system() 函数来调用 exuberant ctags
    程序。你需要启用 system() 函数支持后重新编译 Vim。如果你使用默认的编译选项
    ，system() 函数功能将不会被支持。

    你是否有 |'shellslash'| 选项集？你能试图关闭 |'shellslash'| 选项。当
    taglist 插件使用文件路径调用 exuberant ctags 程序，如果使用不正确的斜线，
    你将看到错误提示。

    使用下面的命令检查与 shell 相关的 Vim 选项值。
>
	:set shell? shellcmdflag? shellpipe?
	:set shellquote? shellredir? shellxquote?
<
    如果你的 .vimrc 或 _vimrc 文件中设置了这些选项，试着移除这些选项。

    你是否在一个 MS-Windows 环境中使用 Unix shell ? 例如，来自于 MKS-toolkit
    的 Unix shell。你是否设定了指向 shell 的 SHELL 环境设置？你可以重新设置
    SHELL 环境变量。

    如果你正在 MS-Windows 中使用 Unix shell ，为了 exuberant ctags 能理解路径
    名中的斜线字符 , 你需要为 Unix 环境编译的exuberant ctags ， 

    exuberant ctags 程序是否支持你的文件类型？ctags 的帮助中列出了 exuberant
    tags 支持的文件类型。如果某文件类型不被支持，你可以扩展 exuberant ctags 来
    支持它。你能使用下面的命令来列出 exuberant ctags 支持的所有文件类型。
>
	ctags --list-languages
<
    在命令提示符下运行下面的命令来检查 exuberant ctags 的输出文件中是否列出了
    你的文件中定义的 tags ：Note
>
	ctags -f - --format=2 --excmd=pattern --fields=nks <filename>
<
    从上面的命令中，如果你能在输出是看到你的 tags , exuberant ctags 程序就能正
    确的解析你的文件。

    在你的主目录中是否存在 .ctags 、 _ctags 或 ctags.cnf 文件为扩展 exuberant
    ctgas 指定默认的选项？如果存在这个文件，请检查文件内的选项以确保这些选项与
    taglist 插件的操作产生冲突。

    如果你正在使用 MS-Windows ，查检 TEMP 和 TMP 的环境变量值。如果这些变量值
    设定路径中存在空格，就用 DOS 8.3 格式的短路径名，或者把他设置指向没有空格
    字符的路径。例如，如果临时目录名是 "C:\Documents and Settings\xyz\Local 
    Settings\Temp"，那么设置 TEMP 变量如下：
>
	set TEMP=C:\DOCUMEN~1\xyz\LOCALS~1\Temp
<
    如果 exuberant ctags 安装到了含有空格字符的目录中，那么把这个目录加入 PATH
    的环境变量，或都设置 'Tlist_Ctags_Cmd' 变量为指向 ctags 的短路径名，或者把
    exuberant ctags 拷贝到名字中没有空格的路径。例如，如果 exuberant ctags 安
    装到目录"C:\Program Files\Ctags"中，那么设置 'Tlist_Ctags_Cmd' 变量如下：
>
	let Tlist_Ctags_Cmd='C:\Progra~1\Ctags\ctags.exe'
<
    如果你在 MS-Windows 上使用 cygwin 编译的 exuberant ctags 版本，确保你已经
    安装了 cygwin 编译的排序程序，而且在你的变量路径里。或者编译的 exuberant
    ctags 支持排序。否则，当 exuberant ctags 使用调用排序程序处理标签输出时，
    他可能会调用MS-windows版本的sort.exe，从而导致错误。

问：当我试图打开taglist窗口的时候，我看到了如下这个错误信息。我怎样才能修复这
    个问题？

    Taglist:无法在/my/path/to/file产生标签
    ctags:无效选项 -- -^@使用：ctags [-BFadtuwvx] [-f tagsfile] file ...

答：taglist 插件只能和 exuberant ctags 在一起工作。你不能使用 GUN ctags 或者
    Unix ctags 程序。如果你用一个非 exuberant ctags 程序，你就会得到与上面类似
    的错误信息。为了修复这个问题，可以把 exuberant ctags 工具的路径加到系统的
    环境变量中或者设置 'Tlist_Ctags_Cmd' 这个变量。

问. 文件含有超过一个相同名称的 tag. 当我在
    taglist 窗口里选择其中一个 tag 时, 光标没有定位到
    这个 tag 所在的位置上 
   
答. taglist 插件 使用的搜索模板是用 exuberant ctags
   生成的并用于将光标定位到 tag 所指定的位置. 如果一个
   文件有多个使用相同名称和相同原型结构的 tag , 那么
   搜索模板也是相同的. 也正因为如此, 使用这个搜索模板
   搜索定位 tag 时, 光标就可能定位到错误的位置.

问. 我已经修改过我的文件并添加了新的
   作用/类/参数. 我还没有保存我的文件.当我更新 taglist 窗口时 
   Taglist 插件并没有显示这些新的 tags .
答. exuberant ctags 只处理已经保存在磁盘的
   文件. 列出在文件定义的 tags , 你必须保存文件后
   再更新 taglist 窗口.

问：我已经使用 exuberant ctags 工具为我的源代码树产生了 ctags 文件。我如何设置
    taglist 插件来使用这个 tags 文件。
答：taglist 插件不使用存储在硬盘里的 tags 文件。对于打开的文件，tagslist 插件
    会自动调用 exuberant ctags 程序来产生列表。vim 的 system() 函数用来调用
    exuberant ctags 来产生 ctags 的输出。这个函数内部使用了一个临时文件来存储
    输出。当读取完输出的内容后，这个文件就会被删除。所以你永远不会看到包函
    exuberant ctags 输出内容的文件。

问：当我设置 |'updatetime'| 选项一个较小的值（小于1000），而且如果我打开了
    taglist 的窗口中按键，当前缓冲的内容会发生改变。这是为什么？
答：taglist 插件使用 |CursorHold| 自动命令来高亮当前的标签。CursorHold 自动 命
    令每 |'updatetime'| 毫秒时间内就会被触发。如果 |'updatetime'| 选项设定一个
    小值时，CursorHold 自动命令会频繁的被触发。由于 taglist 插件为了高亮当前的
    标签而改变焦点，可能与键的移动产生冲突，从而导致当前缓冲区内的内容发生改变
    。对于这个问题，工作区内不把 |'updatetime'| 选项设定为一个小值。

==============================================================================
						*taglist-license*
11. 许可证~
Permission is hereby granted to use and distribute the taglist plugin, with or
without modifications, provided that this copyright notice is copied with it.
Like anything else that's free, taglist.vim is provided *as is* and comes with
no warranty of any kind, either expressed or implied. In no event will the
copyright holder be liable for any damamges resulting from the use of this
software.

==============================================================================
						*taglist-todo*
12. 待办事项~

1. Group tags according to the scope and display them. 举个例子,
   group all the tags belonging to a C++/Java class
2. 支持（动态）显示 tags 在一个修改(未保存)的文件.
3. 只能在已选定的文件类型自动打开 taglist 窗口.
   对于其它类型, 关闭 taglist 窗口.
4. When using the shell from the MKS toolkit, the taglist 插件
   doesn't work.
5. Taglist 插件不能在 通过 netrw 插件远程编辑的文件上工作。
   exuberant ctags utility 不能通过 scp/rcp/ftp, etc 协议
   处理文件
   

==============================================================================

vim:tw=78:ts=8:noet:ft=help:
